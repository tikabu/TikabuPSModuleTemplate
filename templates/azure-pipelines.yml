trigger:
- master

queue: Hosted VS2017
steps:
- task: NuGetToolInstaller@0
  displayName: Use NuGet 4.x
  inputs:
    versionSpec: 4.x
    checkLatest: false
<%
if ($PLASTER_PARAM_Binaries -eq 'Yes') {
@'
- task: NuGetCommand@2
  displayName: NuGet Restore
  inputs:
    command: restore
    feedRestore: <%=$PLASTER_PARAM_VstsPmRepoNameBin%>
    includeNuGetOrg: false
    packagesDirectory: ./packages
    verbosityRestore: Detailed
    solution: "**/packages.config"
    nuGetFeedType: internal
'@
}
%>
- powershell: |
    Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
    Install-Module -Name InvokeBuild -Force -Scope CurrentUser
    Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
  displayName: Install Invoke-Build and update Pester
- powershell: Invoke-Build <%=if ($PLASTER_PARAM_Binaries -eq 'Yes') {"InstallDependencies, "}%>Test, PublishNuget
  displayName: Invoke Build
- task: NuGetCommand@2
  displayName: NuGet Push
  inputs:
    command: push
    feedPublish: <%=$PLASTER_PARAM_VstsPmRepoNameModule%>
    includeNuGetOrg: false
    packagesDirectory: ./packages
    verbosityRestore: Detailed
    searchPatternPush: "$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg"
    nuGetFeedType: internal
    verbosityPush: Detailed
    outputDir: "$(Build.ArtifactStagingDirectory)"
<%
if ($PLASTER_PARAM_Artifact -eq 'Yes') {
@'
- task: CopyFiles@2
  displayName: "Copy module to Artifact Staging Directory"
  inputs:
    sourceFolder: <%=$PLASTER_PARAM_ModuleName%>
    contents: '**'
    targetFolder: $(Build.ArtifactStagingDirectory)\<%=$PLASTER_PARAM_ModuleName%>
    #cleanTargetFolder: false # Optional
    #overWrite: false # Optional
    #flattenFolders: false # Optional
    # Publish Build Artifacts
# Publish build artifacts to Azure Pipelines/TFS or a file share
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '<%=$PLASTER_PARAM_ModuleName%>'
    #includeRootFolder: true
    #archiveType: 'zip' # Options: zip, 7z, tar, wim
    #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
    archiveFile: '$(Build.ArtifactStagingDirectory)/<%=$PLASTER_PARAM_ModuleName%>/<%=$PLASTER_PARAM_ModuleName%>.zip'
    #replaceExistingArchive: true
    #verbose: # Optional
    #quiet: # Optional
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)\<%=$PLASTER_PARAM_ModuleName%>'
    artifactName: '<%=$PLASTER_PARAM_ModuleName%>'
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional
'@
}
%>
- task: PublishTestResults@2
  displayName: "Publish Test Results **/TestResults*.xml"
  condition: succeededOrFailed()
  inputs:
    testRunner: NUnit
    testResultsFiles: "**/TestResults*.xml"
    searchFolder: "$(System.DefaultWorkingDirectory)"
    mergeTestResults: false
    publishRunAttachments: true
- task: PublishCodeCoverageResults@1
  displayName: "Publish code coverage from **/CodeCoverageResults*.xml"
  inputs:
    codeCoverageTool: JaCoCo
    summaryFileLocation: "**/CodeCoverageResults*.xml"
    pathToSources: "$(System.DefaultWorkingDirectory)/<%=$PLASTER_PARAM_ModuleName%>"
    failIfCoverageEmpty: false
